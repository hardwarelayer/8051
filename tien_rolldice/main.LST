C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          
   4          #define GPIO_LED            P2  //define LED matrix port
   5          
   6          #define SEVEN_SEGMENT_SEG_PIN    P0
   7          #define SEVEN_SEGMENT_COMMON_PIN P1
   8          
   9          bit bTimer1IsRunning = 0;
  10          bit bMelodyIsPlaying = 0;
  11          
  12          unsigned char matrixLED = 1;
  13          unsigned char iSongCount = 0;
  14          //4x7 segment LED control
  15          //Common cathode(?) module
  16          //common pin LED1-4 connect to P1: P10-P13
  17          
  18          //segment led will connect to P0 (0-7)
  19          //and we input 1 to turn one segment on
  20          unsigned char code Disp_Tab[] = {
  21                        //.gfe dcba
  22                  0x3f, //0011 1111 - 0
  23                  0x06, //0000 0110 - 1
  24                  0x5b, //0101 1011 - 2
  25                  0x4f, //0100 1111 - 3
  26                  0x66, //0110 0110 - 4
  27                  0x6d, //0110 1101 - 5
  28                  0x7d, //0111 1101 - 6
  29                  0x07, //0000 0111 - 7
  30                  0x7f, //0111 1111 - 8
  31                  0x6f, //0110 1111 - 9
  32                  0x40  //0100 0000 - dau - o giua
  33                  };
  34          
  35          //keyboard
  36          sbit K1=P1^4;                     //Bit OP, K1 connected to P1, pin4 
  37          sbit K2=P1^5;
  38          sbit K3=P1^6;
  39          sbit K4=P1^7;
  40          sbit K5=P3^5;                     //P3
  41          
  42          //Assembly code in delay.src
  43          void Delay10MC(unsigned char);
  44          //Assembly code in timerdelay.src
  45          void TimerDelay10MC(unsigned char);
  46          void Melodyplay(const int Pitch, unsigned int interval);
  47          
  48          void EndNote(void);
  49          void InitTimer1(void);
  50          
  51          //buzzer connect to P21
  52          sbit SPK_PIN_PORT = P2^1; //same as LED at P2^1
  53          
  54          #define pitch_P         0
  55          #define pitch_C5        64580
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 2   

  56          #define pitch_Db5       64634
  57          #define pitch_D5        64685
  58          #define pitch_Eb5       64732
  59          #define pitch_E5        64778
  60          #define pitch_F5        64820
  61          #define pitch_Gb5       64860
  62          #define pitch_G5        64898
  63          #define pitch_Ab5       64934
  64          #define pitch_A5        64968
  65          #define pitch_Bb5       65000
  66          #define pitch_B5        65030
  67          #define pitch_C6        65058
  68          #define pitch_Db6       65085
  69          #define pitch_D6        65110
  70          #define pitch_Eb6       65134
  71          #define pitch_E6        65157
  72          #define pitch_F6        65178
  73          #define pitch_Gb6       65198
  74          #define pitch_G6        65217
  75          #define pitch_Ab6       65235
  76          #define pitch_A6        65252
  77          #define pitch_Bb6       65268
  78          #define pitch_B6        65283
  79          
  80          #define MelodyPin       SPK_PIN_PORT
  81          
  82          unsigned int qtrN, qtrN_us, wholeN, wholeN_us, halfN, halfN_us, eighthN, eighthN_us,
  83                                   sixteenN, sixteenN_us, thirtyTwoN, thirtyTwoN_us, sixtyFourN, sixtyFourN_us,
  84                                   sixN, sixN_us, twelveN, twelveN_us, twentyFourN, twentyFourN_us;
  85          
  86          //5     TIMER/COUNTER 2 (8052)  002Bh
  87          void Timer2_ISR(void) interrupt 5 {
  88   1              MelodyPin = ~MelodyPin; //toggle out pin
  89   1              TF2 = 0; //reset the interrupt/overflow flag
  90   1      }
  91          
  92          unsigned int iTimer1RunMS = 0;
  93          
  94          //https://what-when-how.com/8051-microcontroller/programming-timers-0-and-1-in-8051-c/
  95          //http://www.keil.com/support/man/docs/c51/c51_le_interruptfuncs.htm
  96          //3     TIMER/COUNTER 1 001Bh
  97          void Timer1_ISR(void) interrupt 3 {
  98   1      
  99   1          if (iTimer1RunMS > 0)
 100   1              {
 101   2                      iTimer1RunMS--;
 102   2      
 103   2                      TH1 = 0xFC;      // reload it with the same value as inittimer0
 104   2                      TL1 = 0x18;      //TH&TL is 16 bit
 105   2                      TF1 = 0;     // Clear the interrupt flag to start again
 106   2              }
 107   1              else
 108   1              {
 109   2                      //stop timer1
 110   2                      TR1 = 0;
 111   2                      TF1 = 0; //reset the interrupt/overflow flag
 112   2                      ET1 = 0; // Disable Timer1 interrupts
 113   2      
 114   2                      bTimer1IsRunning = 0;
 115   2      
 116   2              }
 117   1      }
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 3   

 118          
 119          short iTickCount = 0;
 120          unsigned char segmentLEDRoll = 0x01;
 121          
 122          //1     TIMER/COUNTER 0 000Bh
 123          void Timer0_ISR (void) interrupt 1   // It is called after every 250usec
 124          {
 125   1              TH0 = 0xEA;      // reload it with the same value as inittimer0
 126   1              TL0 = 0x60;      //TH&TL is 16 bit
 127   1      
 128   1              if (++iTickCount > 25) {
 129   2                      iTickCount = 0;
 130   2                      if (matrixLED < 128)
 131   2                              matrixLED = matrixLED << 1;
 132   2                      else
 133   2                              matrixLED = 1;
 134   2      
 135   2                      if (segmentLEDRoll >= 0x20) { //0010 0000
 136   3                              segmentLEDRoll = 1;
 137   3                      }
 138   2                      else {
 139   3                          segmentLEDRoll = segmentLEDRoll << 1;
 140   3                      }
 141   2              }
 142   1      
 143   1              TF0 = 0;     // Clear the interrupt flag to start again
 144   1      }
 145          
 146          void MelodyTempo(int Tempo){
 147   1              qtrN = ((60000/Tempo));
 148   1              wholeN = qtrN*4;
 149   1              halfN = (qtrN*2);
 150   1              eighthN = (qtrN/2);
 151   1              sixteenN = (qtrN/4);
 152   1              thirtyTwoN = (qtrN/8);
 153   1              sixtyFourN = (qtrN/16);
 154   1              sixN = (wholeN/6);
 155   1              twelveN = (wholeN/12);
 156   1              twentyFourN = (wholeN/24);
 157   1      }
 158          
 159          void PlayNote(const unsigned char PitchH, const unsigned char PitchL) {
 160   1              RCAP2H = PitchH; //Timer/Counter 2 Reload/Capture High Byte
 161   1              RCAP2L = PitchL;
 162   1              TH2 = PitchH;
 163   1              TL2 = PitchL;
 164   1              //Once timer flag (TF) is set, the programmer must clear it before it can be set again.
 165   1              TF2 = 0; //reset/clear the interrupt/overflow flag
 166   1              TR2 = 1; //timer 2 enabled (start)
 167   1              ET2 = 1; //Enable timer 2
 168   1              EA = 1; //global interrupt enable 
 169   1      }
 170          
 171          void EndNote(void){
 172   1              //EA = 0; //disable all interrupt
 173   1              TR2 = 0; //disable timer 2
 174   1              TF2 = 0; //reset the overflow flag
 175   1              MelodyPin = 1;
 176   1      }
 177          
 178          void delay_ms(unsigned int ms){
 179   1              for(;ms>0;ms--)
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 4   

 180   1                      Delay10MC(100);
 181   1      }
 182          
 183          void Melodyplay(const int Pitch, unsigned int interval) {
 184   1      
 185   1              if(Pitch!=0)
 186   1                      PlayNote(Pitch >> 8, Pitch);
 187   1      
 188   1              //iTimer1RunMS = interval;
 189   1              //InitTimer1();
 190   1              delay_ms(interval);
 191   1              EndNote();
 192   1      }
 193          
 194          /*
 195          osc = 11.0592Mhz
 196          Delay = 50ms
 197          1000uS = 1mS
 198          maximum of timer = 65mS (2^16=65536)
 199          */
 200          void InitTimer0(void)
 201          {
 202   1              TMOD = 0x01;    // Set timer0 in mode 1 (16 bit timer)
 203   1              
 204   1              TH0 = 0xEA;      // 16 bit timer, D8F0 mean 65536-5536=60000 (10000=1milisecond in 12MHz)
 205   1              TL0 = 0x60;
 206   1      
 207   1              TR0 = 1;         // Start Timer 0       
 208   1              ET0 = 1;         // Enable Timer0 interrupts
 209   1              EA  = 1;         // Global interrupt enable
 210   1      
 211   1      }
 212          
 213          //https://what-when-how.com/8051-microcontroller/programming-timers-0-and-1-in-8051-c/
 214          void InitTimer1(void)
 215          {
 216   1              if (bTimer1IsRunning == 0) {
 217   2                      bTimer1IsRunning = 1;
 218   2              }
 219   1              else {
 220   2                      return;
 221   2              }
 222   1      
 223   1              TMOD &= 0x0F;    // Clear 4bit high for timer1, keep 4 bit low for timer 0 (or timer 0 will be reset with
             - unknown data)
 224   1              TMOD |= 0x10;    // Set timer1 in mode 1 (16 bit timer)
 225   1              
 226   1              TH1 = 0xFC;      // 16 bit timer, D8F0 mean 60000-1000=FC18
 227   1              TL1 = 0x18;
 228   1      
 229   1              TR1 = 1;         // Start Timer 1
 230   1              ET1 = 1;         // Enable Timer1 interrupts
 231   1              EA = 1;         // Global interrupt enable
 232   1      
 233   1      }
 234          
 235          void LooneyToons(){ //d=4,o=5,b=140
 236   1              MelodyTempo(140);
 237   1              Melodyplay(pitch_C6, qtrN); //c6
 238   1              Melodyplay(pitch_F6, eighthN); //8f6
 239   1              Melodyplay(pitch_E6, eighthN); //8e6
 240   1              Melodyplay(pitch_D6, eighthN); //8d6
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 5   

 241   1              Melodyplay(pitch_C6, eighthN); //8c6
 242   1              Melodyplay(pitch_A5, qtrN); //a.
 243   1              Melodyplay(pitch_A5, eighthN); //a.
 244   1              Melodyplay(pitch_C6, eighthN); //8c6
 245   1              Melodyplay(pitch_F6, eighthN); //8f6
 246   1              Melodyplay(pitch_E6, eighthN); //8e6
 247   1              Melodyplay(pitch_D6, eighthN); //8d6
 248   1              Melodyplay(pitch_Eb6, eighthN); //8d#6
 249   1              Melodyplay(pitch_E6, qtrN); //e.6
 250   1              Melodyplay(pitch_E6, eighthN); //e.6
 251   1              Melodyplay(pitch_E6, eighthN); //8e6
 252   1              Melodyplay(pitch_E6, eighthN); //8e6
 253   1              Melodyplay(pitch_C6, eighthN); //8c6
 254   1              Melodyplay(pitch_D6, eighthN); //8d6
 255   1              Melodyplay(pitch_C6, eighthN); //8c6
 256   1              Melodyplay(pitch_E6, eighthN); //8e6
 257   1              Melodyplay(pitch_C6, eighthN); //8c6
 258   1              Melodyplay(pitch_D6, eighthN); //8d6
 259   1              Melodyplay(pitch_C6, eighthN); //8c6
 260   1              Melodyplay(pitch_A5, eighthN); //8a
 261   1              Melodyplay(pitch_C6, eighthN); //8c6
 262   1              Melodyplay(pitch_G5, eighthN); //8g
 263   1              Melodyplay(pitch_Bb5, eighthN); //8a#
 264   1              Melodyplay(pitch_A5, eighthN); //8a
 265   1              Melodyplay(pitch_F5, eighthN); //8f
 266   1              Melodyplay(pitch_P, wholeN); //1P
 267   1      }
 268          
 269          void Flintstones(){//d=4,o=5,b=200
 270   1              MelodyTempo(200);
 271   1              Melodyplay(pitch_Ab5, qtrN); //g#
 272   1              Melodyplay(pitch_Db5, qtrN); //c#
 273   1              Melodyplay(pitch_P, eighthN); //8p
 274   1              Melodyplay(pitch_Db6, qtrN); //c#6
 275   1              Melodyplay(pitch_Bb5, eighthN); //8a#
 276   1              Melodyplay(pitch_Ab5, qtrN); //g#
 277   1              Melodyplay(pitch_Db5, qtrN); //c#
 278   1              Melodyplay(pitch_P, eighthN); //8p
 279   1              Melodyplay(pitch_Ab5, qtrN); //g#
 280   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 281   1              Melodyplay(pitch_F5, eighthN); //8f
 282   1              Melodyplay(pitch_F5, eighthN); //8f
 283   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 284   1              Melodyplay(pitch_Ab5, eighthN); //8g#
 285   1              Melodyplay(pitch_Db5, qtrN); //c#
 286   1              Melodyplay(pitch_Eb5, qtrN); //d#
 287   1              Melodyplay(pitch_F5, halfN); //2f
 288   1              Melodyplay(pitch_P, halfN); //2p
 289   1              Melodyplay(pitch_Ab5, qtrN); //g#
 290   1              Melodyplay(pitch_Db5, qtrN); //c#
 291   1              Melodyplay(pitch_P, eighthN); //8p
 292   1              Melodyplay(pitch_Db6, qtrN); //c#6
 293   1              Melodyplay(pitch_Bb5, eighthN); //8a#
 294   1              Melodyplay(pitch_Ab5, qtrN); //g#
 295   1              Melodyplay(pitch_Db5, qtrN); //c#
 296   1              Melodyplay(pitch_P, eighthN); //8p
 297   1              Melodyplay(pitch_Ab5, qtrN); //g#
 298   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 299   1              Melodyplay(pitch_F5, eighthN); //8f
 300   1              Melodyplay(pitch_F5, eighthN); //8f
 301   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 302   1              Melodyplay(pitch_Ab5, eighthN); //8g#
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 6   

 303   1              Melodyplay(pitch_Db5, qtrN); //c#
 304   1              Melodyplay(pitch_Eb5, qtrN); //d#
 305   1              Melodyplay(pitch_Db5, halfN); //2c#
 306   1      }
 307          
 308          void AdamsFamily(){ //d=4, o=6, b=50
 309   1              MelodyTempo(50);
 310   1              Melodyplay(pitch_P, thirtyTwoN); //32P
 311   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 312   1              Melodyplay(pitch_Gb6, sixteenN); //16f#
 313   1              Melodyplay(pitch_Bb6, thirtyTwoN); //32a#
 314   1              Melodyplay(pitch_Gb6, sixteenN); //16f#
 315   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 316   1              Melodyplay(pitch_C6, sixteenN); //16c
 317   1              Melodyplay(pitch_Ab6, eighthN); //8g#
 318   1              Melodyplay(pitch_Gb6, thirtyTwoN); //32f#
 319   1              Melodyplay(pitch_F6, sixteenN); //16f
 320   1              Melodyplay(pitch_Ab6, thirtyTwoN); //32g#
 321   1              Melodyplay(pitch_F6, sixteenN); //16f
 322   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 323   1              Melodyplay(pitch_Bb5, sixteenN); //16a#5
 324   1              Melodyplay(pitch_Gb6, eighthN); //8f#
 325   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 326   1              Melodyplay(pitch_Gb6, sixteenN); //16f#
 327   1              Melodyplay(pitch_Bb6, thirtyTwoN); //32a#
 328   1              Melodyplay(pitch_Gb6, sixteenN); //16f#
 329   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 330   1              Melodyplay(pitch_C6, sixteenN); //16c
 331   1              Melodyplay(pitch_Ab6, eighthN); //8g#
 332   1              Melodyplay(pitch_Gb6, thirtyTwoN); //32f#
 333   1              Melodyplay(pitch_F6, sixteenN); //16f
 334   1              Melodyplay(pitch_Db6, thirtyTwoN); //32c#
 335   1              Melodyplay(pitch_Eb6, sixteenN); //16d#
 336   1              Melodyplay(pitch_F6, thirtyTwoN); //32f
 337   1              Melodyplay(pitch_Gb6, qtrN); //f#
 338   1      }
 339          
 340          void PinkPanther(){//d=4,o=5,b=160
 341   1              MelodyTempo(160);
 342   1              Melodyplay(pitch_Eb5, eighthN); //8d#
 343   1              Melodyplay(pitch_E5, eighthN); //8e
 344   1              Melodyplay(pitch_P, halfN); //2p
 345   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 346   1              Melodyplay(pitch_G5, eighthN); //8g
 347   1              Melodyplay(pitch_P, halfN); //2p
 348   1              Melodyplay(pitch_Eb5, eighthN); //8d#
 349   1              Melodyplay(pitch_E5, eighthN); //8e
 350   1              Melodyplay(pitch_P, sixteenN); //16p
 351   1              Melodyplay(pitch_Gb5, eighthN); //8f#
 352   1              Melodyplay(pitch_G5, eighthN); //8g
 353   1              Melodyplay(pitch_P, sixteenN); //16p
 354   1              Melodyplay(pitch_C6, eighthN); //8c6
 355   1              Melodyplay(pitch_B5, eighthN); //8b
 356   1              Melodyplay(pitch_P, sixteenN); //16p
 357   1              Melodyplay(pitch_Eb5, eighthN); //8d#
 358   1              Melodyplay(pitch_E5, eighthN); //8e
 359   1              Melodyplay(pitch_P, sixteenN); //16p
 360   1              Melodyplay(pitch_B5, eighthN); //8b
 361   1              Melodyplay(pitch_Bb5, halfN); //2a#
 362   1              Melodyplay(pitch_P, halfN); //2p
 363   1              Melodyplay(pitch_A5, sixteenN); //16a
 364   1              Melodyplay(pitch_G5, sixteenN); //16g
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 7   

 365   1              Melodyplay(pitch_E5, sixteenN); //16e
 366   1              Melodyplay(pitch_D5, sixteenN); //16d
 367   1              Melodyplay(pitch_E5, halfN); //2e
 368   1      }
 369          
 370          void BeethovenPlay(){
 371   1              MelodyTempo(240);
 372   1              Melodyplay(pitch_E6, qtrN);
 373   1              Melodyplay(pitch_Eb6, qtrN);
 374   1              Melodyplay(pitch_E6, qtrN);
 375   1              Melodyplay(pitch_Eb6, qtrN);
 376   1              Melodyplay(pitch_E6, qtrN);
 377   1              Melodyplay(pitch_B5, qtrN);
 378   1              Melodyplay(pitch_D6, qtrN);
 379   1      
 380   1              Melodyplay(pitch_C6, qtrN);
 381   1              Melodyplay(pitch_A5, halfN);
 382   1              Melodyplay(pitch_C5, qtrN);
 383   1              Melodyplay(pitch_E6, qtrN);
 384   1              Melodyplay(pitch_A6, qtrN);
 385   1              Melodyplay(pitch_B6, halfN);
 386   1              
 387   1              Melodyplay(pitch_E5, qtrN);
 388   1              Melodyplay(pitch_A5, qtrN);
 389   1              Melodyplay(pitch_B5, qtrN);
 390   1              Melodyplay(pitch_C6, halfN);
 391   1      }
 392          
 393          void Saregama(){
 394   1              MelodyTempo(240);
 395   1              Melodyplay(pitch_Db5, qtrN);
 396   1              Melodyplay(pitch_Eb5, qtrN);
 397   1              Melodyplay(pitch_F5, qtrN);
 398   1              Melodyplay(pitch_Gb5, qtrN);
 399   1              Melodyplay(pitch_Ab5, qtrN);
 400   1              Melodyplay(pitch_Bb5, qtrN);
 401   1              Melodyplay(pitch_C6, qtrN);
 402   1              Melodyplay(pitch_Db6, qtrN);
 403   1              Melodyplay(pitch_P, wholeN);
 404   1              Melodyplay(pitch_Db6, qtrN);
 405   1              Melodyplay(pitch_C6, qtrN);
 406   1              Melodyplay(pitch_Bb5, qtrN);
 407   1              Melodyplay(pitch_Ab5, qtrN);
 408   1              Melodyplay(pitch_Gb5, qtrN);
 409   1              Melodyplay(pitch_F5, qtrN);
 410   1              Melodyplay(pitch_Eb5, qtrN);
 411   1              Melodyplay(pitch_Db5, qtrN);
 412   1      }
 413          
 414          /*
 415              AdamsFamily();
 416                  delay_ms(1000);
 417                  LooneyToons();
 418                  delay_ms(1000);
 419                  Flintstones();
 420                  delay_ms(1000);
 421                  PinkPanther();
 422                  delay_ms(1000);
 423                  BeethovenPlay();
 424                  delay_ms(1000);
 425                  Saregama();
 426                  delay_ms(1000);
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 8   

 427          */
 428          
 429          void main(void)
 430          {
 431   1          unsigned char i = 0;
 432   1      
 433   1          InitTimer0();
 434   1      
 435   1              SEVEN_SEGMENT_SEG_PIN = 0x3f;           //Power on digital tube display 0
 436   1              SEVEN_SEGMENT_COMMON_PIN = 0xff;                //1111 1111 turn on all common cathode pin (connected to collector pin 
             -of NPN transistor to drag current from it to GND)
 437   1      
 438   1              while(1)
 439   1              {                
 440   2                      if(K5==0)               //K5
 441   2                      {
 442   3                              delay_ms(10);
 443   3                              if(K5==0)
 444   3                              {
 445   4                                      SEVEN_SEGMENT_SEG_PIN =  Disp_Tab[i++];
 446   4                                      if (i > 9) i = 0;
 447   4                                      GPIO_LED = 0xef;         //1110 1111
 448   4      
 449   4                                      bMelodyIsPlaying = 1;
 450   4      
 451   4                                      switch (iSongCount) {
 452   5                                      case 0:
 453   5                                          AdamsFamily();
 454   5                                              break;
 455   5                                      case 1:
 456   5                                              LooneyToons();
 457   5                                              break;
 458   5                                      case 2:
 459   5                                              Flintstones();
 460   5                                              break;
 461   5                                      case 3:
 462   5                                              PinkPanther();
 463   5                                              break;
 464   5                                      case 4:
 465   5                                              BeethovenPlay();
 466   5                                              break;
 467   5                                      case 5:
 468   5                                              Saregama();
 469   5                                              break;
 470   5                                      }
 471   4                                      bMelodyIsPlaying = 0;
 472   4                                      if (iSongCount > 5)
 473   4                                              iSongCount = 0;
 474   4                                      else
 475   4                                              iSongCount++;
 476   4                              }
 477   3                      }               
 478   2      
 479   2                      GPIO_LED = ~matrixLED;
 480   2      
 481   2                      SEVEN_SEGMENT_SEG_PIN =  segmentLEDRoll;
 482   2              }                               
 483   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2185    ----
C51 COMPILER V9.01   MAIN                                                                  10/22/2019 22:17:43 PAGE 9   

   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
